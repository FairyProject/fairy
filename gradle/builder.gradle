import java.nio.file.Files
import java.nio.file.StandardCopyOption

apply plugin: "java-library"
apply plugin: "com.github.johnrengelman.shadow"

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(16)
    }
}

ext {
    archieveName = project.name
}

test {
    useJUnitPlatform()
}

abstract class CopyJarToLocal extends DefaultTask {

    @Input
    String jarFrom
    @Input
    String jarTo

    @TaskAction
    void copy() {
        new File(jarTo).getParentFile().mkdirs()
        Files.copy(new File(jarFrom).toPath(), new File(jarTo).toPath(), StandardCopyOption.REPLACE_EXISTING)
    }

}



// setup directory per version
project.afterEvaluate(p -> {
    var directoryProperty = tasks.shadowJar.destinationDirectory
    var jarProperty = tasks.jar.destinationDirectory
    var directory = directoryProperty.get().dir(p.version.toString())
    directoryProperty.set(directory)
    jarProperty.set(directory)

    tasks.jar.archiveFileName.set("${p.ext.archieveName}-sources.jar")
    tasks.shadowJar.archiveFileName.set("${p.ext.archieveName}.jar")

//    println rootProject.file("libs/local/${tasks.shadowJar.archiveFileName}").toPath().toString()

    def copyTask = tasks.create("copyJarToLocal", CopyJarToLocal)
    copyTask.jarFrom = tasks.shadowJar.archiveFile.get().asFile.toPath().toString()
    copyTask.jarTo = rootProject.file("libs/local/io.fairyproject.${tasks.shadowJar.archiveFileName.get()}").toPath().toString()

    tasks.shadowJar.finalizedBy(copyTask)

    shadowJar {
        // XSeries
        exclude("com/cryptomorin/xseries/messages/*")
        relocate("com.cryptomorin.xseries", "io.fairyproject.bukkit.xseries")

        relocate "net.kyori", relocate + "kyori"
    }
})